{"ast":null,"code":"\"use strict\";\n\nimport { compact } from '../utils/compact.js';\nimport { cx } from '../utils/cx.js';\nimport { mapEntries } from '../utils/entries.js';\nimport { mergeWith } from '../utils/merge.js';\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\nimport { uniq } from '../utils/uniq.js';\nimport { createCssFn } from './css.js';\nconst defaults = conf => ({\n  base: {},\n  variants: {},\n  defaultVariants: {},\n  compoundVariants: [],\n  ...conf\n});\nfunction createRecipeFn(options) {\n  const {\n    css,\n    conditions,\n    normalize,\n    layers\n  } = options;\n  function cva(config = {}) {\n    const defaultsConfig = defaults(config);\n    const {\n      base,\n      defaultVariants,\n      compoundVariants\n    } = defaultsConfig;\n    const variants = mapEntries(defaultsConfig.variants, (key, obj) => [key, mapEntries(obj, (optionKey, styles) => [optionKey, normalize(styles)])]);\n    const getVariantCss = createCssFn({\n      conditions,\n      normalize,\n      transform(prop, value) {\n        return variants[prop]?.[value];\n      }\n    });\n    const resolve = (props = {}) => {\n      const variantSelections = normalize({\n        ...defaultVariants,\n        ...compact(props)\n      });\n      let variantCss = {\n        ...base\n      };\n      mergeWith(variantCss, getVariantCss(variantSelections));\n      const compoundVariantCss = getCompoundVariantCss(compoundVariants, variantSelections);\n      return layers.wrap(\"recipes\", css(variantCss, compoundVariantCss));\n    };\n    const variantKeys = Object.keys(variants);\n    const splitVariantProps = props => {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || defaultVariants.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    };\n    const variantMap = mapEntries(variants, (key, value) => [key, Object.keys(value)]);\n    const cvaFn = props => css(resolve(props));\n    return Object.assign(cvaFn, {\n      className: config.className,\n      __cva__: true,\n      variantMap,\n      variantKeys,\n      raw: resolve,\n      config,\n      splitVariantProps,\n      merge(other) {\n        return cva(mergeCva(options)(this, other));\n      }\n    });\n  }\n  function getCompoundVariantCss(cvs, vm) {\n    let result = {};\n    cvs.forEach(cv => {\n      const isMatching = Object.entries(cv).every(([key, value]) => {\n        if (key === \"css\") return true;\n        const values = Array.isArray(value) ? value : [value];\n        return values.some(value2 => vm[key] === value2);\n      });\n      if (isMatching) {\n        result = css(result, cv.css);\n      }\n    });\n    return result;\n  }\n  return cva;\n}\nfunction mergeCva(opts) {\n  const {\n    css\n  } = opts;\n  return function mergeCva2(cvaA, cvaB) {\n    const override = defaults(cvaB.config);\n    const variantKeys = uniq(cvaA.variantKeys, Object.keys(cvaB.variants));\n    const base = css(cvaA.base, override.base);\n    const variants = Object.fromEntries(variantKeys.map(key => [key, css(cvaA.config.variants[key], override.variants[key])]));\n    const defaultVariants = mergeWith(cvaA.config.defaultVariants, override.defaultVariants);\n    const compoundVariants = [...cvaA.compoundVariants, ...override.compoundVariants];\n    const className = cx(cvaA.className, cvaB.className);\n    return {\n      className,\n      base,\n      variants,\n      defaultVariants,\n      compoundVariants\n    };\n  };\n}\nexport { createRecipeFn };","map":{"version":3,"names":["compact","cx","mapEntries","mergeWith","omit","splitProps","uniq","createCssFn","defaults","conf","base","variants","defaultVariants","compoundVariants","createRecipeFn","options","css","conditions","normalize","layers","cva","config","defaultsConfig","key","obj","optionKey","styles","getVariantCss","transform","prop","value","resolve","props","variantSelections","variantCss","compoundVariantCss","getCompoundVariantCss","wrap","variantKeys","Object","keys","splitVariantProps","restProps","recipeProps","localProps","includes","colorPalette","orientation","variantMap","cvaFn","assign","className","__cva__","raw","merge","other","mergeCva","cvs","vm","result","forEach","cv","isMatching","entries","every","values","Array","isArray","some","value2","opts","mergeCva2","cvaA","cvaB","override","fromEntries","map"],"sources":["/Users/ameliamagick/personal-finance-tracker/node_modules/@chakra-ui/react/dist/esm/styled-system/cva.js"],"sourcesContent":["\"use strict\";\nimport { compact } from '../utils/compact.js';\nimport { cx } from '../utils/cx.js';\nimport { mapEntries } from '../utils/entries.js';\nimport { mergeWith } from '../utils/merge.js';\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\nimport { uniq } from '../utils/uniq.js';\nimport { createCssFn } from './css.js';\n\nconst defaults = (conf) => ({\n  base: {},\n  variants: {},\n  defaultVariants: {},\n  compoundVariants: [],\n  ...conf\n});\nfunction createRecipeFn(options) {\n  const { css, conditions, normalize, layers } = options;\n  function cva(config = {}) {\n    const defaultsConfig = defaults(config);\n    const { base, defaultVariants, compoundVariants } = defaultsConfig;\n    const variants = mapEntries(defaultsConfig.variants, (key, obj) => [\n      key,\n      mapEntries(obj, (optionKey, styles) => [optionKey, normalize(styles)])\n    ]);\n    const getVariantCss = createCssFn({\n      conditions,\n      normalize,\n      transform(prop, value) {\n        return variants[prop]?.[value];\n      }\n    });\n    const resolve = (props = {}) => {\n      const variantSelections = normalize({\n        ...defaultVariants,\n        ...compact(props)\n      });\n      let variantCss = { ...base };\n      mergeWith(variantCss, getVariantCss(variantSelections));\n      const compoundVariantCss = getCompoundVariantCss(\n        compoundVariants,\n        variantSelections\n      );\n      return layers.wrap(\"recipes\", css(variantCss, compoundVariantCss));\n    };\n    const variantKeys = Object.keys(variants);\n    const splitVariantProps = (props) => {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || defaultVariants.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    };\n    const variantMap = mapEntries(variants, (key, value) => [\n      key,\n      Object.keys(value)\n    ]);\n    const cvaFn = (props) => css(resolve(props));\n    return Object.assign(cvaFn, {\n      className: config.className,\n      __cva__: true,\n      variantMap,\n      variantKeys,\n      raw: resolve,\n      config,\n      splitVariantProps,\n      merge(other) {\n        return cva(mergeCva(options)(this, other));\n      }\n    });\n  }\n  function getCompoundVariantCss(cvs, vm) {\n    let result = {};\n    cvs.forEach((cv) => {\n      const isMatching = Object.entries(cv).every(([key, value]) => {\n        if (key === \"css\") return true;\n        const values = Array.isArray(value) ? value : [value];\n        return values.some((value2) => vm[key] === value2);\n      });\n      if (isMatching) {\n        result = css(result, cv.css);\n      }\n    });\n    return result;\n  }\n  return cva;\n}\nfunction mergeCva(opts) {\n  const { css } = opts;\n  return function mergeCva2(cvaA, cvaB) {\n    const override = defaults(cvaB.config);\n    const variantKeys = uniq(cvaA.variantKeys, Object.keys(cvaB.variants));\n    const base = css(cvaA.base, override.base);\n    const variants = Object.fromEntries(\n      variantKeys.map((key) => [\n        key,\n        css(cvaA.config.variants[key], override.variants[key])\n      ])\n    );\n    const defaultVariants = mergeWith(\n      cvaA.config.defaultVariants,\n      override.defaultVariants\n    );\n    const compoundVariants = [\n      ...cvaA.compoundVariants,\n      ...override.compoundVariants\n    ];\n    const className = cx(cvaA.className, cvaB.className);\n    return {\n      className,\n      base,\n      variants,\n      defaultVariants,\n      compoundVariants\n    };\n  };\n}\n\nexport { createRecipeFn };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}