{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { setElementValue, getByTypeahead, isComposingEvent, dataAttr, isLeftClick, ariaAttr, isAnchorElement, isModifierKey, getEventTarget, isEditableElement, getEventKey } from '@zag-js/dom-query';\nimport { addOrRemove, first, uniq, diff, isArray, toArray, remove, last, isEqual, createSplitProps, add, partition, ensure } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\"branch\", \"branchContent\", \"branchControl\", \"branchIndentGuide\", \"branchIndicator\", \"branchText\", \"branchTrigger\", \"item\", \"itemIndicator\", \"itemText\", \"label\", \"nodeCheckbox\", \"nodeRenameInput\", \"root\", \"tree\");\nvar parts = anatomy.build();\nvar collection = options => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({\n    rootNode: {\n      children: []\n    }\n  });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = ctx => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = ctx => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  ctx.getById(getNodeId(ctx, value))?.focus();\n};\nvar getRenameInputId = (ctx, value) => `tree:${ctx.id}:rename-input:${value}`;\nvar getRenameInputEl = (ctx, value) => {\n  return ctx.getById(getRenameInputId(ctx, value));\n};\nfunction getCheckedState(collection2, node, checkedValue) {\n  const value = collection2.getNodeValue(node);\n  if (!collection2.isBranchNode(node)) {\n    return checkedValue.includes(value);\n  }\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every(v => checkedValue.includes(v));\n  const someChecked = childValues.some(v => checkedValue.includes(v));\n  return allChecked ? true : someChecked ? \"indeterminate\" : false;\n}\nfunction toggleBranchChecked(collection2, value, checkedValue) {\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every(child => checkedValue.includes(child));\n  return uniq(allChecked ? remove(checkedValue, ...childValues) : add(checkedValue, ...childValues));\n}\nfunction getCheckedValueMap(collection2, checkedValue) {\n  const map = /* @__PURE__ */new Map();\n  collection2.visit({\n    onEnter: node => {\n      const value = collection2.getNodeValue(node);\n      const isBranch = collection2.isBranchNode(node);\n      const checked = getCheckedState(collection2, node, checkedValue);\n      map.set(value, {\n        type: isBranch ? \"branch\" : \"leaf\",\n        checked\n      });\n    }\n  });\n  return map;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    scope,\n    computed,\n    prop,\n    send\n  } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const checkedValue = Array.from(context.get(\"checkedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  const renamingValue = context.get(\"renamingValue\");\n  function getNodeState(props2) {\n    const {\n      node,\n      indexPath\n    } = props2;\n    const value = collection2.getNodeValue(node);\n    const firstNode = collection2.getFirstNode();\n    const firstNodeValue = firstNode ? collection2.getNodeValue(firstNode) : null;\n    return {\n      id: getNodeId(scope, value),\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? firstNodeValue == value : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node),\n      renaming: renamingValue === value,\n      get checked() {\n        return getCheckedState(collection2, node, checkedValue);\n      }\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    checkedValue,\n    toggleChecked(value, isBranch) {\n      send({\n        type: \"CHECKED.TOGGLE\",\n        value,\n        isBranch\n      });\n    },\n    setChecked(value) {\n      send({\n        type: \"CHECKED.SET\",\n        value\n      });\n    },\n    clearChecked() {\n      send({\n        type: \"CHECKED.CLEAR\"\n      });\n    },\n    getCheckedMap() {\n      return getCheckedValueMap(collection2, checkedValue);\n    },\n    expand(value) {\n      send({\n        type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\",\n        value\n      });\n    },\n    collapse(value) {\n      send({\n        type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.CLEAR\",\n        value\n      });\n    },\n    deselect(value) {\n      send({\n        type: value ? \"NODE.DESELECT\" : \"SELECTED.CLEAR\",\n        value\n      });\n    },\n    select(value) {\n      send({\n        type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\",\n        value,\n        isTrusted: false\n      });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(({\n        node\n      }) => node);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"select.parent\"\n      });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand.parent\"\n      });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue\n      });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue\n      });\n    },\n    startRenaming(value) {\n      send({\n        type: \"NODE.RENAME\",\n        value\n      });\n    },\n    submitRenaming(value, label) {\n      send({\n        type: \"RENAME.SUBMIT\",\n        value,\n        label\n      });\n    },\n    cancelRenaming() {\n      send({\n        type: \"RENAME.CANCEL\"\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH_NODE.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              if (isAnchorElement(target) && isModifierKey(event2)) return;\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n              if (!isAnchorElement(target)) {\n                event2.preventDefault();\n              }\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SIBLINGS.EXPAND\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                moveFocus: true\n              });\n            },\n            F2(event2) {\n              if (node.dataset.disabled) return;\n              const canRenameFn = prop(\"canRename\");\n              if (!canRenameFn) return;\n              const indexPath = collection2.getIndexPath(nodeId);\n              if (indexPath) {\n                const node2 = collection2.at(indexPath);\n                if (node2 && !canRenameFn(node2, indexPath)) {\n                  return;\n                }\n              }\n              event2.preventDefault();\n              send({\n                type: \"NODE.RENAME\",\n                value: nodeId\n              });\n            }\n          };\n          const key = getEventKey(event, {\n            dir: prop(\"dir\")\n          });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!getByTypeahead.isValidEvent(event)) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(nodeState.focused),\n        role: \"treeitem\",\n        \"aria-current\": nodeState.selected ? \"true\" : void 0,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-renaming\": dataAttr(nodeState.renaming),\n        \"aria-level\": nodeState.depth,\n        \"data-depth\": nodeState.depth,\n        style: {\n          \"--depth\": nodeState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          if (!isAnchorElement(event.currentTarget)) {\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-renaming\": dataAttr(nodeState.renaming),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        onFocus(event) {\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (nodeState.loading) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH_NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    },\n    getNodeCheckboxProps(props2) {\n      const nodeState = getNodeState(props2);\n      const checkedState = nodeState.checked;\n      return normalize.element({\n        ...parts.nodeCheckbox.attrs,\n        tabIndex: -1,\n        role: \"checkbox\",\n        \"data-state\": checkedState === true ? \"checked\" : checkedState === false ? \"unchecked\" : \"indeterminate\",\n        \"aria-checked\": checkedState === true ? \"true\" : checkedState === false ? \"false\" : \"mixed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          send({\n            type: \"CHECKED.TOGGLE\",\n            value: nodeState.value,\n            isBranch: nodeState.isBranch\n          });\n          event.stopPropagation();\n          const node = event.currentTarget.closest(\"[role=treeitem]\");\n          node?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getNodeRenameInputProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.input({\n        ...parts.nodeRenameInput.attrs,\n        id: getRenameInputId(scope, nodeState.value),\n        type: \"text\",\n        \"aria-label\": \"Rename tree item\",\n        hidden: !nodeState.renaming,\n        onKeyDown(event) {\n          if (isComposingEvent(event)) return;\n          if (event.key === \"Escape\") {\n            send({\n              type: \"RENAME.CANCEL\"\n            });\n            event.preventDefault();\n          }\n          if (event.key === \"Enter\") {\n            send({\n              type: \"RENAME.SUBMIT\",\n              label: event.currentTarget.value\n            });\n            event.preventDefault();\n          }\n          event.stopPropagation();\n        },\n        onBlur(event) {\n          send({\n            type: \"RENAME.SUBMIT\",\n            label: event.currentTarget.value\n          });\n        }\n      });\n    }\n  };\n}\nfunction expandBranches(params, values) {\n  const {\n    context,\n    prop,\n    refs\n  } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...values)));\n    return;\n  }\n  const loadingStatus = context.get(\"loadingStatus\");\n  const [loadedValues, loadingValues] = partition(values, value => loadingStatus[value] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, id => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", prev => ({\n    ...prev,\n    ...nodeWithoutChildren.reduce((acc, id) => ({\n      ...acc,\n      [id]: \"loading\"\n    }), {})\n  }));\n  const nodesToLoad = nodeWithoutChildren.map(id => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return {\n      id,\n      indexPath,\n      valuePath,\n      node\n    };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(({\n    id,\n    indexPath,\n    valuePath,\n    node\n  }) => {\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then(results => {\n    const loadedValues2 = [];\n    const nodeWithErrors = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const {\n        id,\n        indexPath,\n        node,\n        valuePath\n      } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, {\n          ...node,\n          children: result.value\n        });\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n        nodeWithErrors.push({\n          node,\n          error: result.reason,\n          indexPath,\n          valuePath\n        });\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues2)));\n      prop(\"onLoadChildrenComplete\")?.({\n        collection: collection3\n      });\n    }\n    if (nodeWithErrors.length) {\n      prop(\"onLoadChildrenError\")?.({\n        nodes: nodeWithErrors\n      });\n    }\n  });\n}\n\n// src/utils/visit-skip.ts\nfunction skipFn(params) {\n  const {\n    prop,\n    context\n  } = params;\n  return function skip({\n    indexPath\n  }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some(value => !context.get(\"expandedValue\").includes(value));\n  };\n}\n\n// src/tree-view.machine.ts\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual,\n        onChange(expandedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({\n            expandedValue,\n            focusedValue,\n            get expandedNodes() {\n              return prop(\"collection\").findNodes(expandedValue);\n            }\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual,\n        onChange(selectedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({\n            selectedValue,\n            focusedValue,\n            get selectedNodes() {\n              return prop(\"collection\").findNodes(selectedValue);\n            }\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"defaultFocusedValue\") || null,\n        value: prop(\"focusedValue\"),\n        onChange(focusedValue) {\n          prop(\"onFocusChange\")?.({\n            focusedValue,\n            get focusedNode() {\n              return focusedValue ? prop(\"collection\").findNode(focusedValue) : null;\n            }\n          });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      })),\n      checkedValue: bindable(() => ({\n        defaultValue: prop(\"defaultCheckedValue\") || [],\n        value: prop(\"checkedValue\"),\n        isEqual,\n        onChange(value) {\n          prop(\"onCheckedChange\")?.({\n            checkedValue: value\n          });\n        }\n      })),\n      renamingValue: bindable(() => ({\n        sync: true,\n        defaultValue: null\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: {\n        ...getByTypeahead.defaultOptions\n      },\n      pendingAborts: /* @__PURE__ */new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: ({\n      prop\n    }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({\n      refs\n    }) => refs.get(\"typeaheadState\").keysSoFar.length > 0,\n    visibleNodes: ({\n      prop,\n      context\n    }) => {\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({\n          prop,\n          context\n        }),\n        onEnter: (node, indexPath) => {\n          nodes.push({\n            node,\n            indexPath\n          });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.CLEAR\": {\n      actions: [\"clearExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [{\n      guard: and(\"isMultipleSelection\", \"moveFocus\"),\n      actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n    }, {\n      guard: \"isMultipleSelection\",\n      actions: [\"selectAllNodes\"]\n    }],\n    \"SELECTED.CLEAR\": {\n      actions: [\"clearSelected\"]\n    },\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    },\n    \"CHECKED.TOGGLE\": {\n      actions: [\"toggleChecked\"]\n    },\n    \"CHECKED.SET\": {\n      actions: [\"setChecked\"]\n    },\n    \"CHECKED.CLEAR\": {\n      actions: [\"clearChecked\"]\n    },\n    \"NODE.FOCUS\": {\n      actions: [\"setFocusedNode\"]\n    },\n    \"NODE.ARROW_DOWN\": [{\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n    }, {\n      actions: [\"focusTreeNextNode\"]\n    }],\n    \"NODE.ARROW_UP\": [{\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n    }, {\n      actions: [\"focusTreePrevNode\"]\n    }],\n    \"NODE.ARROW_LEFT\": {\n      actions: [\"focusBranchNode\"]\n    },\n    \"BRANCH_NODE.ARROW_LEFT\": [{\n      guard: \"isBranchExpanded\",\n      actions: [\"collapseBranch\"]\n    }, {\n      actions: [\"focusBranchNode\"]\n    }],\n    \"BRANCH_NODE.ARROW_RIGHT\": [{\n      guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n      actions: [\"focusBranchFirstNode\"]\n    }, {\n      actions: [\"expandBranch\"]\n    }],\n    \"SIBLINGS.EXPAND\": {\n      actions: [\"expandSiblingBranches\"]\n    },\n    \"NODE.HOME\": [{\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n    }, {\n      actions: [\"focusTreeFirstNode\"]\n    }],\n    \"NODE.END\": [{\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n    }, {\n      actions: [\"focusTreeLastNode\"]\n    }],\n    \"NODE.CLICK\": [{\n      guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n      actions: [\"toggleNodeSelection\"]\n    }, {\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"extendSelectionToNode\"]\n    }, {\n      actions: [\"selectNode\"]\n    }],\n    \"BRANCH_NODE.CLICK\": [{\n      guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n      actions: [\"toggleNodeSelection\"]\n    }, {\n      guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n      actions: [\"extendSelectionToNode\"]\n    }, {\n      guard: \"expandOnClick\",\n      actions: [\"selectNode\", \"toggleBranchNode\"]\n    }, {\n      actions: [\"selectNode\"]\n    }],\n    \"BRANCH_TOGGLE.CLICK\": {\n      actions: [\"toggleBranchNode\"]\n    },\n    \"TREE.TYPEAHEAD\": {\n      actions: [\"focusMatchedNode\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.RENAME\": {\n          target: \"renaming\",\n          actions: [\"setRenamingValue\"]\n        }\n      }\n    },\n    renaming: {\n      entry: [\"syncRenameInput\", \"focusRenameInput\"],\n      on: {\n        \"RENAME.SUBMIT\": {\n          guard: \"isRenameLabelValid\",\n          target: \"idle\",\n          actions: [\"submitRenaming\"]\n        },\n        \"RENAME.CANCEL\": {\n          target: \"idle\",\n          actions: [\"cancelRenaming\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({\n        context,\n        event\n      }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({\n        context,\n        event\n      }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({\n        event\n      }) => event.shiftKey,\n      isCtrlKey: ({\n        event\n      }) => event.ctrlKey,\n      hasSelectedItems: ({\n        context\n      }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({\n        prop\n      }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({\n        event\n      }) => !!event.moveFocus,\n      expandOnClick: ({\n        prop\n      }) => !!prop(\"expandOnClick\"),\n      isRenameLabelValid: ({\n        event\n      }) => event.label.trim() !== \"\"\n    },\n    actions: {\n      selectNode({\n        context,\n        event\n      }) {\n        const value = event.id || event.value;\n        context.set(\"selectedValue\", prev => {\n          if (value == null) return prev;\n          if (!event.isTrusted && isArray(value)) return prev.concat(...value);\n          return [isArray(value) ? last(value) : value].filter(Boolean);\n        });\n      },\n      deselectNode({\n        context,\n        event\n      }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", prev => remove(prev, ...value));\n      },\n      setFocusedNode({\n        context,\n        event\n      }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({\n        context\n      }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({\n        context\n      }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({\n        context,\n        event,\n        action\n      }) {\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const {\n          event\n        } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", prev => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", prev => remove(prev, ...value));\n      },\n      setExpanded({\n        context,\n        event\n      }) {\n        if (!isArray(event.value)) return;\n        context.set(\"expandedValue\", event.value);\n      },\n      clearExpanded({\n        context\n      }) {\n        context.set(\"expandedValue\", []);\n      },\n      setSelected({\n        context,\n        event\n      }) {\n        if (!isArray(event.value)) return;\n        context.set(\"selectedValue\", event.value);\n      },\n      clearSelected({\n        context\n      }) {\n        context.set(\"selectedValue\", []);\n      },\n      focusTreeFirstNode({\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode(params) {\n        const {\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode(void 0, {\n          skip: skipFn(params)\n        });\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({\n        context,\n        prop\n      }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const {\n          context,\n          prop,\n          refs,\n          event,\n          scope,\n          computed\n        } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(({\n          node: node2\n        }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({\n        context,\n        event\n      }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map(node => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const {\n          context,\n          event,\n          prop,\n          computed\n        } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(({\n          node\n        }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts({\n        refs\n      }) {\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach(abort => abort.abort());\n        aborts.clear();\n      },\n      toggleChecked({\n        context,\n        event,\n        prop\n      }) {\n        const collection2 = prop(\"collection\");\n        context.set(\"checkedValue\", prev => event.isBranch ? toggleBranchChecked(collection2, event.value, prev) : addOrRemove(prev, event.value));\n      },\n      setChecked({\n        context,\n        event\n      }) {\n        context.set(\"checkedValue\", event.value);\n      },\n      clearChecked({\n        context\n      }) {\n        context.set(\"checkedValue\", []);\n      },\n      setRenamingValue({\n        context,\n        event,\n        prop\n      }) {\n        context.set(\"renamingValue\", event.value);\n        const onRenameStartFn = prop(\"onRenameStart\");\n        if (onRenameStartFn) {\n          const collection2 = prop(\"collection\");\n          const indexPath = collection2.getIndexPath(event.value);\n          if (indexPath) {\n            const node = collection2.at(indexPath);\n            if (node) {\n              onRenameStartFn({\n                value: event.value,\n                node,\n                indexPath\n              });\n            }\n          }\n        }\n      },\n      submitRenaming({\n        context,\n        event,\n        prop,\n        scope\n      }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(renamingValue);\n        if (!indexPath) return;\n        const trimmedLabel = event.label.trim();\n        const onBeforeRenameFn = prop(\"onBeforeRename\");\n        if (onBeforeRenameFn) {\n          const details = {\n            value: renamingValue,\n            label: trimmedLabel,\n            indexPath\n          };\n          const shouldRename = onBeforeRenameFn(details);\n          if (!shouldRename) {\n            context.set(\"renamingValue\", null);\n            focusNode(scope, renamingValue);\n            return;\n          }\n        }\n        prop(\"onRenameComplete\")?.({\n          value: renamingValue,\n          label: trimmedLabel,\n          indexPath\n        });\n        context.set(\"renamingValue\", null);\n        focusNode(scope, renamingValue);\n      },\n      cancelRenaming({\n        context,\n        scope\n      }) {\n        const renamingValue = context.get(\"renamingValue\");\n        context.set(\"renamingValue\", null);\n        if (renamingValue) {\n          focusNode(scope, renamingValue);\n        }\n      },\n      syncRenameInput({\n        context,\n        scope,\n        prop\n      }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const collection2 = prop(\"collection\");\n        const node = collection2.findNode(renamingValue);\n        if (!node) return;\n        const label = collection2.stringifyNode(node);\n        const inputEl = getRenameInputEl(scope, renamingValue);\n        setElementValue(inputEl, label);\n      },\n      focusRenameInput({\n        context,\n        scope\n      }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const inputEl = getRenameInputEl(scope, renamingValue);\n        if (!inputEl) return;\n        inputEl.focus();\n        inputEl.select();\n      }\n    }\n  }\n});\nvar props = createProps()([\"ids\", \"collection\", \"dir\", \"expandedValue\", \"expandOnClick\", \"defaultFocusedValue\", \"focusedValue\", \"getRootNode\", \"id\", \"onExpandedChange\", \"onFocusChange\", \"onSelectionChange\", \"checkedValue\", \"selectedValue\", \"selectionMode\", \"typeahead\", \"defaultExpandedValue\", \"defaultSelectedValue\", \"defaultCheckedValue\", \"onCheckedChange\", \"onLoadChildrenComplete\", \"onLoadChildrenError\", \"loadChildren\", \"canRename\", \"onRenameStart\", \"onBeforeRename\", \"onRenameComplete\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","TreeCollection","filePathToTree","setElementValue","getByTypeahead","isComposingEvent","dataAttr","isLeftClick","ariaAttr","isAnchorElement","isModifierKey","getEventTarget","isEditableElement","getEventKey","addOrRemove","first","uniq","diff","isArray","toArray","remove","last","isEqual","createSplitProps","add","partition","ensure","createGuards","createMachine","createProps","anatomy","parts","build","collection","options","empty","rootNode","children","filePathCollection","paths","getRootId","ctx","ids","root","id","getLabelId","label","getNodeId","value","node","getTreeId","tree","focusNode","getById","focus","getRenameInputId","getRenameInputEl","getCheckedState","collection2","checkedValue","getNodeValue","isBranchNode","includes","childValues","getDescendantValues","allChecked","every","v","someChecked","some","toggleBranchChecked","child","getCheckedValueMap","map","Map","visit","onEnter","isBranch","checked","set","type","connect","service","normalize","context","scope","computed","prop","send","expandedValue","Array","from","get","selectedValue","isTypingAhead","focusedValue","loadingStatus","renamingValue","getNodeState","props2","indexPath","firstNode","getFirstNode","firstNodeValue","valuePath","getValuePath","disabled","Boolean","focused","selected","expanded","loading","depth","length","renaming","toggleChecked","setChecked","clearChecked","getCheckedMap","expand","collapse","deselect","select","isTrusted","getVisibleNodes","selectParent","parentNode","getParentNode","_selectedValue","src","expandParent","_expandedValue","setExpandedValue","setSelectedValue","startRenaming","submitRenaming","cancelRenaming","getRootProps","element","attrs","dir","getLabelProps","getTreeProps","role","tabIndex","onKeyDown","event","defaultPrevented","target","closest","nodeId","dataset","console","warn","matches","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","key","Enter","*","a","metaKey","moveFocus","F2","canRenameFn","getIndexPath","node2","at","exec","isValidEvent","getItemProps","nodeState","item","join","style","onFocus","stopPropagation","onClick","currentTarget","isMetaKey","ctrlKey","getItemTextProps","itemState","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","branch","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","getBranchIndentGuideProps","branchIndentGuide","getNodeCheckboxProps","checkedState","nodeCheckbox","preventScroll","getNodeRenameInputProps","input","nodeRenameInput","onBlur","expandBranches","params","values","refs","prev","loadedValues","loadingValues","nodeWithChildren","nodeWithoutChildren","findNode","getNodeChildren","reduce","acc","nodesToLoad","pendingAborts","loadChildren","proms","existingAbort","abort","delete","abortController","AbortController","signal","Promise","allSettled","then","results","loadedValues2","nodeWithErrors","nextLoadingStatus","collection3","forEach","result","index","status","push","replace","Reflect","deleteProperty","error","reason","nodes","skipFn","skip","slice","and","machine","props","selectionMode","typeahead","expandOnClick","defaultExpandedValue","defaultSelectedValue","initialState","bindable","getContext","defaultValue","onChange","expandedNodes","findNodes","selectedNodes","focusedNode","sync","typeaheadState","defaultOptions","isMultipleSelection","keysSoFar","visibleNodes","on","actions","guard","exit","states","idle","entry","implementations","guards","isBranchFocused","isBranchExpanded","isShiftKey","isCtrlKey","hasSelectedItems","isRenameLabelValid","trim","selectNode","concat","filter","deselectNode","setFocusedNode","clearFocusedNode","clearSelectedItem","toggleBranchNode","action","isExpanded","expandBranch","valuesToExpand","collapseBranch","collapseBranches","setExpanded","clearExpanded","setSelected","clearSelected","focusTreeFirstNode","firstValue","focusTreeLastNode","lastNode","getLastNode","lastValue","focusBranchFirstNode","branchNode","focusTreeNextNode","nextNode","getNextNode","nextValue","focusTreePrevNode","prevNode","getPreviousNode","prevValue","focusBranchNode","parentValue","selectAllNodes","getValues","focusMatchedNode","elements","textContent","stringifyNode","state","activeId","toggleNodeSelection","expandAllBranches","branchValues","getBranchValues","expandSiblingBranches","getSiblingNodes","extendSelectionToNode","anchorValue","targetValue","hits","nodeValue","extendSelectionToNextNode","Set","has","extendSelectionToPrevNode","extendSelectionToFirstNode","currentSelection","extendSelectionToLastNode","current","clearPendingAborts","aborts","clear","setRenamingValue","onRenameStartFn","trimmedLabel","onBeforeRenameFn","details","shouldRename","syncRenameInput","inputEl","focusRenameInput","splitProps","itemProps","splitItemProps"],"sources":["/Users/ameliamagick/personal-finance-tracker/node_modules/@zag-js/tree-view/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { setElementValue, getByTypeahead, isComposingEvent, dataAttr, isLeftClick, ariaAttr, isAnchorElement, isModifierKey, getEventTarget, isEditableElement, getEventKey } from '@zag-js/dom-query';\nimport { addOrRemove, first, uniq, diff, isArray, toArray, remove, last, isEqual, createSplitProps, add, partition, ensure } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\n  \"branch\",\n  \"branchContent\",\n  \"branchControl\",\n  \"branchIndentGuide\",\n  \"branchIndicator\",\n  \"branchText\",\n  \"branchTrigger\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"label\",\n  \"nodeCheckbox\",\n  \"nodeRenameInput\",\n  \"root\",\n  \"tree\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({ rootNode: { children: [] } });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = (ctx) => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  ctx.getById(getNodeId(ctx, value))?.focus();\n};\nvar getRenameInputId = (ctx, value) => `tree:${ctx.id}:rename-input:${value}`;\nvar getRenameInputEl = (ctx, value) => {\n  return ctx.getById(getRenameInputId(ctx, value));\n};\nfunction getCheckedState(collection2, node, checkedValue) {\n  const value = collection2.getNodeValue(node);\n  if (!collection2.isBranchNode(node)) {\n    return checkedValue.includes(value);\n  }\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every((v) => checkedValue.includes(v));\n  const someChecked = childValues.some((v) => checkedValue.includes(v));\n  return allChecked ? true : someChecked ? \"indeterminate\" : false;\n}\nfunction toggleBranchChecked(collection2, value, checkedValue) {\n  const childValues = collection2.getDescendantValues(value);\n  const allChecked = childValues.every((child) => checkedValue.includes(child));\n  return uniq(allChecked ? remove(checkedValue, ...childValues) : add(checkedValue, ...childValues));\n}\nfunction getCheckedValueMap(collection2, checkedValue) {\n  const map = /* @__PURE__ */ new Map();\n  collection2.visit({\n    onEnter: (node) => {\n      const value = collection2.getNodeValue(node);\n      const isBranch = collection2.isBranchNode(node);\n      const checked = getCheckedState(collection2, node, checkedValue);\n      map.set(value, {\n        type: isBranch ? \"branch\" : \"leaf\",\n        checked\n      });\n    }\n  });\n  return map;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const { context, scope, computed, prop, send } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const checkedValue = Array.from(context.get(\"checkedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  const renamingValue = context.get(\"renamingValue\");\n  function getNodeState(props2) {\n    const { node, indexPath } = props2;\n    const value = collection2.getNodeValue(node);\n    const firstNode = collection2.getFirstNode();\n    const firstNodeValue = firstNode ? collection2.getNodeValue(firstNode) : null;\n    return {\n      id: getNodeId(scope, value),\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? firstNodeValue == value : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node),\n      renaming: renamingValue === value,\n      get checked() {\n        return getCheckedState(collection2, node, checkedValue);\n      }\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    checkedValue,\n    toggleChecked(value, isBranch) {\n      send({ type: \"CHECKED.TOGGLE\", value, isBranch });\n    },\n    setChecked(value) {\n      send({ type: \"CHECKED.SET\", value });\n    },\n    clearChecked() {\n      send({ type: \"CHECKED.CLEAR\" });\n    },\n    getCheckedMap() {\n      return getCheckedValueMap(collection2, checkedValue);\n    },\n    expand(value) {\n      send({ type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\", value });\n    },\n    collapse(value) {\n      send({ type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.CLEAR\", value });\n    },\n    deselect(value) {\n      send({ type: value ? \"NODE.DESELECT\" : \"SELECTED.CLEAR\", value });\n    },\n    select(value) {\n      send({ type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\", value, isTrusted: false });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(({ node }) => node);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"select.parent\" });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand.parent\" });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({ type: \"EXPANDED.SET\", value: _expandedValue });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({ type: \"SELECTED.SET\", value: _selectedValue });\n    },\n    startRenaming(value) {\n      send({ type: \"NODE.RENAME\", value });\n    },\n    submitRenaming(value, label) {\n      send({ type: \"RENAME.SUBMIT\", value, label });\n    },\n    cancelRenaming() {\n      send({ type: \"RENAME.CANCEL\" });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_DOWN\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_UP\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\", id: nodeId });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"BRANCH_NODE.ARROW_RIGHT\", id: nodeId });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.HOME\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.END\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event2.key });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              if (isAnchorElement(target) && isModifierKey(event2)) return;\n              send({ type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\", id: nodeId, src: \"keyboard\" });\n              if (!isAnchorElement(target)) {\n                event2.preventDefault();\n              }\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SIBLINGS.EXPAND\", id: nodeId });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SELECTED.ALL\", moveFocus: true });\n            },\n            F2(event2) {\n              if (node.dataset.disabled) return;\n              const canRenameFn = prop(\"canRename\");\n              if (!canRenameFn) return;\n              const indexPath = collection2.getIndexPath(nodeId);\n              if (indexPath) {\n                const node2 = collection2.at(indexPath);\n                if (node2 && !canRenameFn(node2, indexPath)) {\n                  return;\n                }\n              }\n              event2.preventDefault();\n              send({ type: \"NODE.RENAME\", value: nodeId });\n            }\n          };\n          const key = getEventKey(event, { dir: prop(\"dir\") });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!getByTypeahead.isValidEvent(event)) return;\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(nodeState.focused),\n        role: \"treeitem\",\n        \"aria-current\": nodeState.selected ? \"true\" : void 0,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-renaming\": dataAttr(nodeState.renaming),\n        \"aria-level\": nodeState.depth,\n        \"data-depth\": nodeState.depth,\n        style: {\n          \"--depth\": nodeState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n          if (!isAnchorElement(event.currentTarget)) {\n            event.preventDefault();\n          }\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": ariaAttr(nodeState.disabled),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: nodeState.value });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: nodeState.id,\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-renaming\": dataAttr(nodeState.renaming),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": ariaAttr(nodeState.loading),\n        onFocus(event) {\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          if (nodeState.loading) return;\n          if (!isLeftClick(event)) return;\n          if (isAnchorElement(event.currentTarget) && isModifierKey(event)) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"BRANCH_NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    },\n    getNodeCheckboxProps(props2) {\n      const nodeState = getNodeState(props2);\n      const checkedState = nodeState.checked;\n      return normalize.element({\n        ...parts.nodeCheckbox.attrs,\n        tabIndex: -1,\n        role: \"checkbox\",\n        \"data-state\": checkedState === true ? \"checked\" : checkedState === false ? \"unchecked\" : \"indeterminate\",\n        \"aria-checked\": checkedState === true ? \"true\" : checkedState === false ? \"false\" : \"mixed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          if (nodeState.disabled) return;\n          if (!isLeftClick(event)) return;\n          send({ type: \"CHECKED.TOGGLE\", value: nodeState.value, isBranch: nodeState.isBranch });\n          event.stopPropagation();\n          const node = event.currentTarget.closest(\"[role=treeitem]\");\n          node?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getNodeRenameInputProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.input({\n        ...parts.nodeRenameInput.attrs,\n        id: getRenameInputId(scope, nodeState.value),\n        type: \"text\",\n        \"aria-label\": \"Rename tree item\",\n        hidden: !nodeState.renaming,\n        onKeyDown(event) {\n          if (isComposingEvent(event)) return;\n          if (event.key === \"Escape\") {\n            send({ type: \"RENAME.CANCEL\" });\n            event.preventDefault();\n          }\n          if (event.key === \"Enter\") {\n            send({ type: \"RENAME.SUBMIT\", label: event.currentTarget.value });\n            event.preventDefault();\n          }\n          event.stopPropagation();\n        },\n        onBlur(event) {\n          send({ type: \"RENAME.SUBMIT\", label: event.currentTarget.value });\n        }\n      });\n    }\n  };\n}\nfunction expandBranches(params, values) {\n  const { context, prop, refs } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...values)));\n    return;\n  }\n  const loadingStatus = context.get(\"loadingStatus\");\n  const [loadedValues, loadingValues] = partition(values, (value) => loadingStatus[value] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, (id) => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", (prev) => ({\n    ...prev,\n    ...nodeWithoutChildren.reduce((acc, id) => ({ ...acc, [id]: \"loading\" }), {})\n  }));\n  const nodesToLoad = nodeWithoutChildren.map((id) => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return { id, indexPath, valuePath, node };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(({ id, indexPath, valuePath, node }) => {\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then((results) => {\n    const loadedValues2 = [];\n    const nodeWithErrors = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const { id, indexPath, node, valuePath } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, { ...node, children: result.value });\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n        nodeWithErrors.push({ node, error: result.reason, indexPath, valuePath });\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues2)));\n      prop(\"onLoadChildrenComplete\")?.({ collection: collection3 });\n    }\n    if (nodeWithErrors.length) {\n      prop(\"onLoadChildrenError\")?.({ nodes: nodeWithErrors });\n    }\n  });\n}\n\n// src/utils/visit-skip.ts\nfunction skipFn(params) {\n  const { prop, context } = params;\n  return function skip({ indexPath }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some((value) => !context.get(\"expandedValue\").includes(value));\n  };\n}\n\n// src/tree-view.machine.ts\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual,\n        onChange(expandedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({\n            expandedValue,\n            focusedValue,\n            get expandedNodes() {\n              return prop(\"collection\").findNodes(expandedValue);\n            }\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual,\n        onChange(selectedValue) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({\n            selectedValue,\n            focusedValue,\n            get selectedNodes() {\n              return prop(\"collection\").findNodes(selectedValue);\n            }\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"defaultFocusedValue\") || null,\n        value: prop(\"focusedValue\"),\n        onChange(focusedValue) {\n          prop(\"onFocusChange\")?.({\n            focusedValue,\n            get focusedNode() {\n              return focusedValue ? prop(\"collection\").findNode(focusedValue) : null;\n            }\n          });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      })),\n      checkedValue: bindable(() => ({\n        defaultValue: prop(\"defaultCheckedValue\") || [],\n        value: prop(\"checkedValue\"),\n        isEqual,\n        onChange(value) {\n          prop(\"onCheckedChange\")?.({ checkedValue: value });\n        }\n      })),\n      renamingValue: bindable(() => ({\n        sync: true,\n        defaultValue: null\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: { ...getByTypeahead.defaultOptions },\n      pendingAborts: /* @__PURE__ */ new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({ refs }) => refs.get(\"typeaheadState\").keysSoFar.length > 0,\n    visibleNodes: ({ prop, context }) => {\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({ prop, context }),\n        onEnter: (node, indexPath) => {\n          nodes.push({ node, indexPath });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.CLEAR\": {\n      actions: [\"clearExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [\n      {\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n      },\n      {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllNodes\"]\n      }\n    ],\n    \"SELECTED.CLEAR\": {\n      actions: [\"clearSelected\"]\n    },\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    },\n    \"CHECKED.TOGGLE\": {\n      actions: [\"toggleChecked\"]\n    },\n    \"CHECKED.SET\": {\n      actions: [\"setChecked\"]\n    },\n    \"CHECKED.CLEAR\": {\n      actions: [\"clearChecked\"]\n    },\n    \"NODE.FOCUS\": {\n      actions: [\"setFocusedNode\"]\n    },\n    \"NODE.ARROW_DOWN\": [\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n      },\n      {\n        actions: [\"focusTreeNextNode\"]\n      }\n    ],\n    \"NODE.ARROW_UP\": [\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n      },\n      {\n        actions: [\"focusTreePrevNode\"]\n      }\n    ],\n    \"NODE.ARROW_LEFT\": {\n      actions: [\"focusBranchNode\"]\n    },\n    \"BRANCH_NODE.ARROW_LEFT\": [\n      {\n        guard: \"isBranchExpanded\",\n        actions: [\"collapseBranch\"]\n      },\n      {\n        actions: [\"focusBranchNode\"]\n      }\n    ],\n    \"BRANCH_NODE.ARROW_RIGHT\": [\n      {\n        guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n        actions: [\"focusBranchFirstNode\"]\n      },\n      {\n        actions: [\"expandBranch\"]\n      }\n    ],\n    \"SIBLINGS.EXPAND\": {\n      actions: [\"expandSiblingBranches\"]\n    },\n    \"NODE.HOME\": [\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n      },\n      {\n        actions: [\"focusTreeFirstNode\"]\n      }\n    ],\n    \"NODE.END\": [\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n      },\n      {\n        actions: [\"focusTreeLastNode\"]\n      }\n    ],\n    \"NODE.CLICK\": [\n      {\n        guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n        actions: [\"toggleNodeSelection\"]\n      },\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"extendSelectionToNode\"]\n      },\n      {\n        actions: [\"selectNode\"]\n      }\n    ],\n    \"BRANCH_NODE.CLICK\": [\n      {\n        guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n        actions: [\"toggleNodeSelection\"]\n      },\n      {\n        guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n        actions: [\"extendSelectionToNode\"]\n      },\n      {\n        guard: \"expandOnClick\",\n        actions: [\"selectNode\", \"toggleBranchNode\"]\n      },\n      {\n        actions: [\"selectNode\"]\n      }\n    ],\n    \"BRANCH_TOGGLE.CLICK\": {\n      actions: [\"toggleBranchNode\"]\n    },\n    \"TREE.TYPEAHEAD\": {\n      actions: [\"focusMatchedNode\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.RENAME\": {\n          target: \"renaming\",\n          actions: [\"setRenamingValue\"]\n        }\n      }\n    },\n    renaming: {\n      entry: [\"syncRenameInput\", \"focusRenameInput\"],\n      on: {\n        \"RENAME.SUBMIT\": {\n          guard: \"isRenameLabelValid\",\n          target: \"idle\",\n          actions: [\"submitRenaming\"]\n        },\n        \"RENAME.CANCEL\": {\n          target: \"idle\",\n          actions: [\"cancelRenaming\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({ context, event }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({ context, event }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({ event }) => event.shiftKey,\n      isCtrlKey: ({ event }) => event.ctrlKey,\n      hasSelectedItems: ({ context }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({ event }) => !!event.moveFocus,\n      expandOnClick: ({ prop }) => !!prop(\"expandOnClick\"),\n      isRenameLabelValid: ({ event }) => event.label.trim() !== \"\"\n    },\n    actions: {\n      selectNode({ context, event }) {\n        const value = event.id || event.value;\n        context.set(\"selectedValue\", (prev) => {\n          if (value == null) return prev;\n          if (!event.isTrusted && isArray(value)) return prev.concat(...value);\n          return [isArray(value) ? last(value) : value].filter(Boolean);\n        });\n      },\n      deselectNode({ context, event }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", (prev) => remove(prev, ...value));\n      },\n      setFocusedNode({ context, event }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({ context }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({ context, event, action }) {\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const { event } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const { context, event } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch({ context, event }) {\n        context.set(\"expandedValue\", (prev) => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const { context, event } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", (prev) => remove(prev, ...value));\n      },\n      setExpanded({ context, event }) {\n        if (!isArray(event.value)) return;\n        context.set(\"expandedValue\", event.value);\n      },\n      clearExpanded({ context }) {\n        context.set(\"expandedValue\", []);\n      },\n      setSelected({ context, event }) {\n        if (!isArray(event.value)) return;\n        context.set(\"selectedValue\", event.value);\n      },\n      clearSelected({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      focusTreeFirstNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode(params) {\n        const { prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode(void 0, { skip: skipFn(params) });\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({ context, prop }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const { context, prop, refs, event, scope, computed } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(({ node: node2 }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({ context, event }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const { context, prop } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map((node) => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const { context, event, prop, computed } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(({ node }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts({ refs }) {\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach((abort) => abort.abort());\n        aborts.clear();\n      },\n      toggleChecked({ context, event, prop }) {\n        const collection2 = prop(\"collection\");\n        context.set(\n          \"checkedValue\",\n          (prev) => event.isBranch ? toggleBranchChecked(collection2, event.value, prev) : addOrRemove(prev, event.value)\n        );\n      },\n      setChecked({ context, event }) {\n        context.set(\"checkedValue\", event.value);\n      },\n      clearChecked({ context }) {\n        context.set(\"checkedValue\", []);\n      },\n      setRenamingValue({ context, event, prop }) {\n        context.set(\"renamingValue\", event.value);\n        const onRenameStartFn = prop(\"onRenameStart\");\n        if (onRenameStartFn) {\n          const collection2 = prop(\"collection\");\n          const indexPath = collection2.getIndexPath(event.value);\n          if (indexPath) {\n            const node = collection2.at(indexPath);\n            if (node) {\n              onRenameStartFn({\n                value: event.value,\n                node,\n                indexPath\n              });\n            }\n          }\n        }\n      },\n      submitRenaming({ context, event, prop, scope }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(renamingValue);\n        if (!indexPath) return;\n        const trimmedLabel = event.label.trim();\n        const onBeforeRenameFn = prop(\"onBeforeRename\");\n        if (onBeforeRenameFn) {\n          const details = {\n            value: renamingValue,\n            label: trimmedLabel,\n            indexPath\n          };\n          const shouldRename = onBeforeRenameFn(details);\n          if (!shouldRename) {\n            context.set(\"renamingValue\", null);\n            focusNode(scope, renamingValue);\n            return;\n          }\n        }\n        prop(\"onRenameComplete\")?.({\n          value: renamingValue,\n          label: trimmedLabel,\n          indexPath\n        });\n        context.set(\"renamingValue\", null);\n        focusNode(scope, renamingValue);\n      },\n      cancelRenaming({ context, scope }) {\n        const renamingValue = context.get(\"renamingValue\");\n        context.set(\"renamingValue\", null);\n        if (renamingValue) {\n          focusNode(scope, renamingValue);\n        }\n      },\n      syncRenameInput({ context, scope, prop }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const collection2 = prop(\"collection\");\n        const node = collection2.findNode(renamingValue);\n        if (!node) return;\n        const label = collection2.stringifyNode(node);\n        const inputEl = getRenameInputEl(scope, renamingValue);\n        setElementValue(inputEl, label);\n      },\n      focusRenameInput({ context, scope }) {\n        const renamingValue = context.get(\"renamingValue\");\n        if (!renamingValue) return;\n        const inputEl = getRenameInputEl(scope, renamingValue);\n        if (!inputEl) return;\n        inputEl.focus();\n        inputEl.select();\n      }\n    }\n  }\n});\nvar props = createProps()([\n  \"ids\",\n  \"collection\",\n  \"dir\",\n  \"expandedValue\",\n  \"expandOnClick\",\n  \"defaultFocusedValue\",\n  \"focusedValue\",\n  \"getRootNode\",\n  \"id\",\n  \"onExpandedChange\",\n  \"onFocusChange\",\n  \"onSelectionChange\",\n  \"checkedValue\",\n  \"selectedValue\",\n  \"selectionMode\",\n  \"typeahead\",\n  \"defaultExpandedValue\",\n  \"defaultSelectedValue\",\n  \"defaultCheckedValue\",\n  \"onCheckedChange\",\n  \"onLoadChildrenComplete\",\n  \"onLoadChildrenError\",\n  \"loadChildren\",\n  \"canRename\",\n  \"onRenameStart\",\n  \"onBeforeRename\",\n  \"onRenameComplete\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}