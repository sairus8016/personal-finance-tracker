{"ast":null,"code":"var _jsxFileName = \"/Users/ameliamagick/personal-finance-tracker/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BudgetType from './Budget';\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport { Card, CardContent, Typography, Stack, Collapse, IconButton } from \"@mui/material\";\nimport { ExpandMore, ExpandLess } from \"@mui/icons-material\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [budgets, setBudgets] = useState([]);\n  const [selectedBudgetId, setSelectedBudgetId] = useState(\"\");\n  const [selectedBudgetName, setSelectedBudgetName] = useState(\"\");\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [newBudgetName, setNewBudgetName] = useState(\"\");\n  const [expanded, setExpanded] = useState(!selectedBudgetId);\n\n  // const budgetId = \"68cdf096c35077c8f92b1f98\"; // hardcoded for now\n\n  // useEffect(() => {\n  //   fetch('http://localhost:5001/api/init', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     }\n  //   })\n  //     .then(response => response.json())\n  //     .then(response => {\n  //       console.log(\"Created budget data\");\n  //       setLoading(false);\n  //   })\n  //   .catch((err) => {\n  //     console.error(\"Failed to create budget data:\", err);\n  //     setLoading(false);\n  //   });\n  // }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/budget\");\n      const data = await response.json();\n      // Normalize: always store an array\n      if (Array.isArray(data)) {\n        setBudgets(data);\n      } else if (Array.isArray(data.budgets)) {\n        setBudgets(data.budgets);\n      } else if (data) {\n        setBudgets([data]); // single object fallback\n      } else {\n        setBudgets([]);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch budgets:\", err);\n    }\n  };\n  const fetchBudgetById = async id => {\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:5001/api/budget/${id}`);\n      const data = await response.json();\n      console.log(\"Fetched budget data:\", data);\n      setSelectedBudget(data);\n      setSelectedBudgetName(data.name);\n    } catch (err) {\n      console.error(\"Failed to fetch budget data:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new budget\n  const handleCreateBudget = async e => {\n    e.preventDefault();\n    if (!newBudgetName.trim()) return;\n    try {\n      const response = await fetch(\"http://localhost:5001/api/saveBudget\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: newBudgetName\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to create budget\");\n      const created = await response.json();\n      setNewBudgetName(\"\");\n      await fetchBudgets();\n      setSelectedBudgetId(created._id);\n      setSelectedBudgetName(created.name);\n      await fetchBudgetById(created._id);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  // Load selected budget when changed\n  useEffect(() => {\n    if (selectedBudgetId) {\n      fetchBudgetById(selectedBudgetId);\n    }\n  }, [selectedBudgetId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        maxWidth: 600,\n        margin: \"2rem auto\",\n        boxShadow: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: expanded ? \"Manage Budgets\" : `Current Budget: ${selectedBudgetName}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setExpanded(!expanded),\n            children: expanded ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 27\n            }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          in: expanded,\n          children: /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 2,\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Select Existing Budget\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: selectedBudgetId || \"\",\n                label: \"Select Existing Budget\",\n                onChange: e => setSelectedBudgetId(e.target.value),\n                children: budgets === null || budgets === void 0 ? void 0 : budgets.map(b => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: b._id,\n                  children: b.name\n                }, b._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"textSecondary\",\n              children: \"or create a new budget:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                label: \"New Budget Name\",\n                size: \"small\",\n                fullWidth: true,\n                value: newBudgetName,\n                onChange: e => setNewBudgetName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: handleCreateBudget,\n                sx: {\n                  whiteSpace: \"nowrap\"\n                },\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this) : selectedBudget ? /*#__PURE__*/_jsxDEV(BudgetType, {\n      budgetId: selectedBudgetId,\n      incomeStreams: selectedBudget.incomeStreams,\n      expenses: selectedBudget.expenses,\n      onRefresh: () => fetchBudgetById(selectedBudgetId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Select or create a budget to begin.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this)\n  // {budgets ? (\n  //   <BudgetType budgetId={budgetId} incomeStreams={budgets.incomeStreams} expenses={budgets.expenses} onRefresh={fetchBudgets} />\n  // ): (\n  //   <div>{loading ? \"Loading...\" : \"Failed to load budget data.\"}</div>\n  // )}\n  ;\n}\n_s(App, \"tVSFq5dukDUVeEWjblZhDMf9480=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BudgetType","Button","TextField","Select","MenuItem","InputLabel","FormControl","Card","CardContent","Typography","Stack","Collapse","IconButton","ExpandMore","ExpandLess","jsxDEV","_jsxDEV","App","_s","budgets","setBudgets","selectedBudgetId","setSelectedBudgetId","selectedBudgetName","setSelectedBudgetName","selectedBudget","setSelectedBudget","loading","setLoading","newBudgetName","setNewBudgetName","expanded","setExpanded","fetchBudgets","response","fetch","data","json","Array","isArray","err","console","error","fetchBudgetById","id","log","name","handleCreateBudget","e","preventDefault","trim","method","headers","body","JSON","stringify","ok","Error","created","_id","className","children","sx","maxWidth","margin","boxShadow","direction","alignItems","justifyContent","variant","fileName","_jsxFileName","lineNumber","columnNumber","onClick","in","spacing","mt","fullWidth","value","label","onChange","target","map","b","color","size","whiteSpace","budgetId","incomeStreams","expenses","onRefresh","_c","$RefreshReg$"],"sources":["/Users/ameliamagick/personal-finance-tracker/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BudgetType from './Budget';\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport { Card, CardContent, Typography, Stack, Collapse, IconButton } from \"@mui/material\";\nimport { ExpandMore, ExpandLess } from \"@mui/icons-material\";\nimport './App.css';\n\ninterface IncomeStreamProps {\n  _id: string;\n  name: string;\n  frequency: number;\n  amount: number;\n}\n\ninterface Expenses {\n  _id: string;\n  name: string;\n  amount: number;\n}\n\ninterface Budget {\n  _id: string,\n  name: string,\n  incomeStreams: IncomeStreamProps[];\n  expenses: Expenses[];\n}\n\nfunction App() {\n  const [budgets, setBudgets] = useState<Budget[]>([]);\n  const [selectedBudgetId, setSelectedBudgetId] = useState<string>(\"\");\n  const [selectedBudgetName, setSelectedBudgetName] = useState<string>(\"\");\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);  \n  const [loading, setLoading] = useState<boolean>(true);\n  const [newBudgetName, setNewBudgetName] = useState(\"\");\n  const [expanded, setExpanded] = useState(!selectedBudgetId);\n\n  // const budgetId = \"68cdf096c35077c8f92b1f98\"; // hardcoded for now\n\n  // useEffect(() => {\n  //   fetch('http://localhost:5001/api/init', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     }\n  //   })\n  //     .then(response => response.json())\n  //     .then(response => {\n  //       console.log(\"Created budget data\");\n  //       setLoading(false);\n  //   })\n  //   .catch((err) => {\n  //     console.error(\"Failed to create budget data:\", err);\n  //     setLoading(false);\n  //   });\n  // }, []);\n\n  const fetchBudgets = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/budget\");\n      const data = await response.json();\n      // Normalize: always store an array\n      if (Array.isArray(data)) {\n        setBudgets(data);\n      } else if (Array.isArray(data.budgets)) {\n        setBudgets(data.budgets);\n      } else if (data) {\n        setBudgets([data]); // single object fallback\n      } else {\n        setBudgets([]);\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch budgets:\", err);\n    }\n  };\n\n  const fetchBudgetById = async (id: string) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:5001/api/budget/${id}`);\n      const data = await response.json();\n      console.log(\"Fetched budget data:\", data);\n      setSelectedBudget(data);\n      setSelectedBudgetName(data.name);\n    } catch (err) {\n      console.error(\"Failed to fetch budget data:\", err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Create new budget\n  const handleCreateBudget = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newBudgetName.trim()) return;\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/saveBudget\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name: newBudgetName }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to create budget\");\n      const created = await response.json();\n\n      setNewBudgetName(\"\");\n      await fetchBudgets();\n      setSelectedBudgetId(created._id);\n      setSelectedBudgetName(created.name);\n      await fetchBudgetById(created._id);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchBudgets();\n  }, []);\n\n  // Load selected budget when changed\n  useEffect(() => {\n    if (selectedBudgetId) {\n      fetchBudgetById(selectedBudgetId);\n    }\n  }, [selectedBudgetId]);\n\n  return (\n    <div className=\"App\">\n      <Card sx={{ maxWidth: 600, margin: \"2rem auto\", boxShadow: 3 }}>\n        <CardContent>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Typography variant=\"h6\">\n              {expanded ? \"Manage Budgets\" : `Current Budget: ${selectedBudgetName}`}\n            </Typography>\n            <IconButton onClick={() => setExpanded(!expanded)}>\n              {expanded ? <ExpandLess /> : <ExpandMore />}\n            </IconButton>\n          </Stack>\n\n          <Collapse in={expanded}>\n            <Stack spacing={2} mt={2}>\n              <FormControl fullWidth>\n                <InputLabel>Select Existing Budget</InputLabel>\n                <Select\n                  value={selectedBudgetId || \"\"}\n                  label=\"Select Existing Budget\"\n                  onChange={(e) => setSelectedBudgetId(e.target.value)}\n                >\n                  {budgets?.map((b) => (\n                    <MenuItem key={b._id} value={b._id}>\n                      {b.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                or create a new budget:\n              </Typography>\n\n              <Stack direction=\"row\" spacing={1}>\n                <TextField\n                  label=\"New Budget Name\"\n                  size=\"small\"\n                  fullWidth\n                  value={newBudgetName}\n                  onChange={(e) => setNewBudgetName(e.target.value)}\n                />\n                <Button\n                  variant=\"contained\"\n                  onClick={handleCreateBudget}\n                  sx={{ whiteSpace: \"nowrap\" }}\n                >\n                  Create\n                </Button>\n              </Stack>\n            </Stack>\n          </Collapse>\n        </CardContent>\n      </Card>\n\n      {/* Budget content */}\n      {loading ? (\n        <div>Loading...</div>\n      ) : selectedBudget ? (\n        <BudgetType\n          budgetId={selectedBudgetId}\n          incomeStreams={selectedBudget.incomeStreams}\n          expenses={selectedBudget.expenses}\n          onRefresh={() => fetchBudgetById(selectedBudgetId)}\n        />\n      ) : (\n        <div>Select or create a budget to begin.</div>\n      )}\n    </div>\n      // {budgets ? (\n      //   <BudgetType budgetId={budgetId} incomeStreams={budgets.incomeStreams} expenses={budgets.expenses} onRefresh={fetchBudgets} />\n      // ): (\n      //   <div>{loading ? \"Loading...\" : \"Failed to load budget data.\"}</div>\n      // )}\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}